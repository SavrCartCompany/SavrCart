
---

## üß≠ Navigation Overview

Use a `TabView` with 4 main tabs:

* üõç Grocery Lists (`GroceryListTab`)
* üí≥ Budgets (`BudgetTab`)
* üìä Insights (`InsightsTab`)
* ‚öôÔ∏è Settings (`SettingsTab`)

---

## 1. üõ† **Onboarding Flow**

### `OnboardingView`

* Fullscreen, vertically stacked screens using `TabView` or paged `ScrollView`
* Steps:

  * Welcome message + animated logo
  * Name input
  * Dietary preference picker (multi-select chips or toggles)
  * Profile picture uploader (using `PhotosPicker`)
  * TOS + Privacy agreement (checkbox + link)

```swift
struct OnboardingStepView: View {
    var title: String
    var content: AnyView
}
```

---

## 2. üõí **Grocery List Flow**

### `GroceryListHomeView`

* Header: ‚ÄúWelcome back, \[Name]‚Äù
* Button: ‚Äú+ Create New List‚Äù
* List of `GroceryListCardView` with:

  * Name, total items, estimated cost
  * Edit / Copy / Delete buttons

### `GroceryListDetailView`

* Sectioned list with `GroceryItemRowView`
* Add Item Bar:

  * TextField with Kroger autocomplete
  * Dropdown for item alternatives (red/green price indicators)
  * Button: ‚ÄúAdd‚Äù

```swift
struct GroceryItemRowView: View {
    var item: GroceryItem
    var showDropdown: Bool
}
```

---

## 3. üí∏ **Budget Management**

### `BudgetOverviewView`

* Total, spent, remaining bars
* Pie chart view (`Chart` or `SwiftUICharts`)
* Button: ‚Äú+ Create Budget‚Äù

### `CreateBudgetView`

* Inputs:

  * Period picker (calendar or date range)
  * Total budget
  * Optional subcategory inputs
  * Toggle for thresholds per category

---

## 4. üß† **AI Tools**

### `AIListGeneratorView`

* Prompt field: ‚ÄúCreate a list for...‚Äù
* Budget constraint field
* Submit button ‚Üí loading ‚Üí generated list

### `RecipeView`

* Prompt: ‚ÄúCreate a \[type] meal for \[people] under \[\$budget]‚Äù
* Output: Title, Ingredients, Instructions
* Button: ‚ÄúAdd to Grocery List‚Äù

---

## 5. üìä **Insights View**

### `InsightsTab`

* Sectioned scroll:

  * Budget Summary
  * Top categories by spend
  * AI suggestions (cards)
  * Tip rating (üëç / üëé)

---

## 6. ‚öôÔ∏è **Settings View**

### `SettingsTab`

* Account section (profile picture, email)
* Preferences:

  * Theme toggle
  * Font selector
  * AI behavior settings
  * Threshold editor
* Legal section: TOS, Privacy

---




######################CODE#########################
---

## üß¢ OnboardingView (Multi-Step Setup)

```swift
struct OnboardingView: View {
    @State private var step = 0
    var body: some View {
        TabView(selection: $step) {
            WelcomeStep().tag(0)
            NameStep().tag(1)
            DietaryPrefsStep().tag(2)
            ProfileImageStep().tag(3)
            TermsStep().tag(4)
        }
        .tabViewStyle(PageTabViewStyle())
    }
}
```

Each step is its own view:

```swift
struct NameStep: View {
    @State private var name = ""
    var body: some View {
        VStack {
            Text("What's your name?")
                .font(.title)
            TextField("Your name", text: $name)
                .textFieldStyle(.roundedBorder)
                .padding()
            Button("Continue") { /* go to next step */ }
        }
    }
}
```

---

## üõç Grocery List: Home & Detail

### `GroceryListHomeView`

```swift
struct GroceryListHomeView: View {
    @State var lists: [GroceryList] = []
    var body: some View {
        NavigationView {
            VStack {
                HStack {
                    Text("Your Lists").font(.title2)
                    Spacer()
                    Button("+ New List") { /* navigate */ }
                }.padding()

                List(lists) { list in
                    NavigationLink(destination: GroceryListDetailView(list: list)) {
                        GroceryListCardView(list: list)
                    }
                }
            }
        }
    }
}
```

### `GroceryListCardView`

```swift
struct GroceryListCardView: View {
    let list: GroceryList
    var body: some View {
        VStack(alignment: .leading) {
            Text(list.title).font(.headline)
            HStack {
                Text("\(list.items.count) items")
                Spacer()
                Text("Est: $\(list.totalPrice, specifier: "%.2f")")
            }.font(.subheadline)
        }
    }
}
```

---

## üßæ GroceryListDetailView + Alternatives

```swift
struct GroceryListDetailView: View {
    @State var list: GroceryList
    var body: some View {
        VStack {
            List {
                ForEach(list.items) { item in
                    GroceryItemRowView(item: item)
                }.onDelete { /* delete logic */ }
            }

            HStack {
                TextField("Add item...", text: /* $query */)
                Button("Add") { /* search & select alternative */ }
            }.padding()
        }
    }
}
```

### `GroceryItemRowView`

```swift
struct GroceryItemRowView: View {
    var item: GroceryItem
    @State var showAlternatives = false

    var body: some View {
        VStack(alignment: .leading) {
            HStack {
                Text(item.name)
                Spacer()
                Text("$\(item.estimatedPrice, specifier: "%.2f")")
            }

            if showAlternatives {
                ForEach(item.alternatives) { alt in
                    HStack {
                        Text(alt.name)
                        Spacer()
                        Text("$\(alt.price, specifier: "%.2f")")
                            .foregroundColor(alt.price < item.estimatedPrice ? .green : .red)
                    }
                }
            }
        }
        .onTapGesture { showAlternatives.toggle() }
    }
}
```

---

## üí≥ Budget Engine

### `CreateBudgetView`

```swift
struct CreateBudgetView: View {
    @State private var total = ""
    @State private var startDate = Date()
    @State private var endDate = Date()
    @State private var categories: [BudgetCategory] = []

    var body: some View {
        Form {
            Section(header: Text("Budget Period")) {
                DatePicker("Start", selection: $startDate)
                DatePicker("End", selection: $endDate)
            }

            Section(header: Text("Total Budget")) {
                TextField("Enter total", text: $total)
                    .keyboardType(.decimalPad)
            }

            Section(header: Text("Subcategories")) {
                ForEach(categories) { category in
                    HStack {
                        Text(category.name)
                        Spacer()
                        TextField("Limit", text: .constant(category.limit))
                            .keyboardType(.decimalPad)
                    }
                }
            }

            Button("Save Budget") { /* save logic */ }
        }
    }
}
```

---

## üß† AI List Generator View

```swift
struct AIListGeneratorView: View {
    @State private var prompt = ""
    @State private var budget = ""
    @State private var generatedList: [GroceryItem] = []

    var body: some View {
        VStack {
            TextField("e.g., Vegan dinner for 4", text: $prompt)
            TextField("Budget ($)", text: $budget)
                .keyboardType(.decimalPad)

            Button("Generate List") {
                // Call local or remote AI
            }

            List(generatedList) { item in
                GroceryItemRowView(item: item)
            }
        }
        .padding()
    }
}
```

---

## üìä InsightsTab

```swift
struct InsightsTab: View {
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                Text("Budget Breakdown")
                    .font(.headline)
                BudgetPieChart(data: [/* from model */])

                Text("Top Spending Categories")
                ForEach(/* insights */) { insight in
                    Text(insight.tipText)
                }
            }
            .padding()
        }
    }
}
```

---

## ‚öôÔ∏è SettingsTab

```swift
struct SettingsTab: View {
    @AppStorage("theme") var theme = "light"
    @AppStorage("dietary") var dietary = "none"

    var body: some View {
        Form {
            Section(header: Text("Theme")) {
                Picker("Theme", selection: $theme) {
                    Text("Light").tag("light")
                    Text("Dark").tag("dark")
                }
            }

            Section(header: Text("Dietary Preferences")) {
                Picker("Diet", selection: $dietary) {
                    Text("None").tag("none")
                    Text("Dairy-Free").tag("dairy-free")
                    Text("Vegan").tag("vegan")
                }
            }

            Section {
                NavigationLink("Privacy Policy") { /* show PDF or WebView */ }
                NavigationLink("Terms of Service") { /* same */ }
            }
        }
    }
}
```

---

Would you like a **ready-to-clone GitHub template project** with this layout bootstrapped next?
